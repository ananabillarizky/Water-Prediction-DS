# -*- coding: utf-8 -*-
"""streamlit_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UXSWMLTygKvIiBo1bFe2R-rAZxbf6qvq
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
import joblib

# Konfigurasi halaman
st.set_page_config(
    page_title="Prediksi Potabilitas Air - Random Forest",
    page_icon="üíß",
    layout="wide"
)

# Judul dan deskripsi
st.title("üíß Prediksi Potabilitas Air menggunakan Random Forest")
st.write("""
### Aplikasi ini memprediksi apakah air dapat diminum atau tidak berdasarkan parameternya
Dibuat oleh: Ananabilla Rizky Muhardanie (A11.2023.15502)
""")

# Fungsi untuk memuat/melatih model
@st.cache_resource
def load_model():
    # Baca dataset (ganti path sesuai lokasi file Anda)
    df = pd.read_csv('water_potability.csv')

    # Handle missing values
    df = df.fillna(df.mean())

    # Pisahkan fitur dan target
    X = df[['ph', 'Hardness', 'Solids', 'Chloramines', 'Sulfate',
            'Conductivity', 'Organic_carbon', 'Trihalomethanes', 'Turbidity']]
    y = df['Potability']

    # Normalisasi data
    scaler = MinMaxScaler()
    X_scaled = scaler.fit_transform(X)

    # Train model
    model = RandomForestClassifier(random_state=42)
    model.fit(X_scaled, y)

    return model, scaler

# Load model dan scaler
try:
    model, scaler = load_model()
    st.success("Model berhasil dimuat!")
except Exception as e:
    st.error(f"Terjadi error saat memuat model: {str(e)}")
    st.stop()

# Form input
st.write("### Masukkan Parameter Air")

# Buat dua kolom untuk input
col1, col2 = st.columns(2)

with col1:
    ph = st.number_input("pH",
                        min_value=0.0,
                        max_value=14.0,
                        value=7.0,
                        help="Tingkat keasaman air (0-14)")

    hardness = st.number_input("Hardness (mg/L)",
                              min_value=0.0,
                              value=200.0,
                              help="Tingkat kesadahan air")

    solids = st.number_input("Solids (mg/L)",
                            min_value=0.0,
                            value=20000.0,
                            help="Total padatan terlarut")

    chloramines = st.number_input("Chloramines (mg/L)",
                                 min_value=0.0,
                                 value=4.0,
                                 help="Kadar kloramin dalam air")

    sulfate = st.number_input("Sulfate (mg/L)",
                             min_value=0.0,
                             value=250.0,
                             help="Kadar sulfat dalam air")

with col2:
    conductivity = st.number_input("Conductivity (ŒºS/cm)",
                                  min_value=0.0,
                                  value=400.0,
                                  help="Konduktivitas air")

    organic_carbon = st.number_input("Organic Carbon (mg/L)",
                                    min_value=0.0,
                                    value=10.0,
                                    help="Kadar karbon organik")

    trihalomethanes = st.number_input("Trihalomethanes (Œºg/L)",
                                     min_value=0.0,
                                     value=50.0,
                                     help="Kadar trihalometan")

    turbidity = st.number_input("Turbidity (NTU)",
                               min_value=0.0,
                               value=5.0,
                               help="Tingkat kekeruhan air")

# Tombol prediksi
if st.button("Prediksi"):
    # Siapkan data input
    input_data = np.array([[ph, hardness, solids, chloramines, sulfate,
                           conductivity, organic_carbon, trihalomethanes, turbidity]])

    # Normalisasi input
    input_scaled = scaler.transform(input_data)

    # Buat prediksi
    prediction = model.predict(input_scaled)[0]
    prediction_proba = model.predict_proba(input_scaled)[0]

    # Tampilkan hasil
    st.write("### Hasil Prediksi")

    # Buat dua kolom untuk hasil
    result_col1, result_col2 = st.columns(2)

    with result_col1:
        st.write("**Status Air:**")
        if prediction == 1:
            st.success("‚úÖ Air Dapat Diminum")
        else:
            st.error("‚ùå Air Tidak Dapat Diminum")

    with result_col2:
        st.write("**Probabilitas:**")
        st.write(f"- Tidak Dapat Diminum: {prediction_proba[0]:.2%}")
        st.write(f"- Dapat Diminum: {prediction_proba[1]:.2%}")

# Informasi tambahan
with st.expander("‚ÑπÔ∏è Informasi Parameter"):
    st.write("""
    - **pH**: Tingkat keasaman air (0-14)
    - **Hardness**: Tingkat kesadahan air dalam mg/L
    - **Solids**: Total padatan terlarut dalam mg/L
    - **Chloramines**: Kadar kloramin dalam air (mg/L)
    - **Sulfate**: Kadar sulfat dalam air (mg/L)
    - **Conductivity**: Konduktivitas air dalam ŒºS/cm
    - **Organic_carbon**: Kadar karbon organik dalam mg/L
    - **Trihalomethanes**: Kadar trihalometan dalam Œºg/L
    - **Turbidity**: Tingkat kekeruhan air dalam NTU
    """)

# Footer
st.markdown("---")
st.markdown("### üìä Model Information")
st.write("""
- Model yang digunakan: Random Forest Classifier
- Akurasi model: ~78%
- Dataset: Water Potability Dataset
""")